{"version":3,"file":"background/index.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keploy-plugin/./src/background/utils.js","webpack://keploy-plugin/webpack/bootstrap","webpack://keploy-plugin/./src/background/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nfunction injectFetchScript (tabId, appid, message, tabListener) {\n    chrome.scripting.executeScript(\n        {\n          target: {tabId},\n          world: \"MAIN\",\n          func: function(appid, testName, tabid){\n            const requestDeps = new XMLHttpRequest()\n            requestDeps.open('GET', `http://localhost:8081/api/deps?appid=` + appid + `&testName=` + testName, false)\n            requestDeps.send(null)\n            if(requestDeps.status == 200 && sessionStorage.getItem(\"depArr\")==null){\n                const docs = JSON.parse( requestDeps.responseText )\n                sessionStorage.setItem(\"depArr\", JSON.stringify(docs[0].deps))\n                var dataObj = {\"event\":\"playbackStarted\", \"testName\":testName, \"appid\": appid, \"tabId\": tabid};\n                let storeEvent = new CustomEvent('eventMode', {\"detail\":dataObj});\n                document.dispatchEvent(storeEvent);\n            }\n          },\n          args: [appid, message.options.testName, tabId],\n          injectImmediately: true,\n        },\n        function(results){\n          if(results != undefined){\n            chrome.tabs.onUpdated.removeListener(tabListener)\n          }\n        },\n      )\n}\n\nexports.tabListener = function(message, appid){\n    return function tabListener(tabId, changeInfo, tab) {\n        if(tab.active === true){\n            chrome.storage.sync.get([\"appid\"], function(d) {\n            chrome.storage.sync.set({ \"tabid\": tabId, ...d}, function(){})\n            appid = d.appid\n            let data = {\n                testName: message.options.testName, \n                event: message.event,\n                appid: appid,\n                tabId: tabId\n            }\n            if(message.event == \"playbackStarted\"){\n                injectFetchScript(tabId, appid, message, tabListener)\n            }\n            else {\n                chrome.tabs.sendMessage(tabId, data, (resp) => {\n                if(!chrome.runtime.lastError && resp) {\n                    chrome.tabs.onUpdated.removeListener(tabListener)\n                } else {\n                    console.log(chrome.runtime.lastError)\n                }\n                });\n            }\n            });\n\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-disable no-empty */\n/* eslint-disable no-unused-vars */\n\nconst {tabListener} = require(\"./utils\")\n\n// import browser from 'webextension-polyfill'\n// import UAParser from 'ua-parser-js'\n\n// const parser = new UAParser(window.navigator.userAgent)\n// const browserName = parser.getBrowser().name\n// const isChrome = browserName === 'Chrome'\n// const isFirefox = browserName === 'Firefox'\n\nfunction getId() {\n  return 'mooikfkahbdckldjjndioackbalphokd'\n  // if (process.env.SIDE_ID) return process.env.SIDE_ID\n  // return isChrome\n    // ? 'mooikfkahbdckldjjndioackbalphokd'\n    // : isFirefox\n    // ? '{a6fd85ed-e919-4a43-a5af-8da18bda539f}'\n    // : ''\n}\n\nconst sideId = getId()\n\nfunction startPolling(payload) {\n  setInterval(() => {\n    chrome.runtime.sendMessage(sideId, {\n        uri: '/health',\n        verb: 'get',\n      }).catch(res => ({ error: res.message }))\n      .then(res => {\n        if (!res) {\n          chrome.runtime.sendMessage(sideId, {\n            uri: '/register',\n            verb: 'post',\n            payload,\n          })\n        }\n      })\n  }, 1000)\n}\n\nstartPolling({\n  name: \"Selenium IDE plugin\",\n  version: \"1.0.0\",\n  commands: []\n})\n\nvar appid = \"\"\n\nchrome.scripting.getRegisteredContentScripts(\n  {ids: [\"1\"]}, (scripts) => {\n    if(scripts.length === 0){\n      console.log(\"registers content script!!!\")\n      chrome.scripting.registerContentScripts(\n        [{\n            world: \"MAIN\", \n            id: \"1\", \n            js: [ `kscript.js`], \n            runAt: \"document_start\",\n            allFrames: true,\n            matches: [\"<all_urls>\"]\n        }],\n      )        \n    }\n  }\n)\n\nchrome.runtime.onMessageExternal.addListener(async (message, sender, sendResponse) => {\n  console.log(\"event triggered\", message)\n\n  if(message.event===\"recordingStopped\" || message.event===\"playbackStopped\"){\n    chrome.storage.sync.get(['tabid'], function(d) {\n      chrome.tabs.sendMessage(d.tabid, {event: message.event, testName: message.options.testName, appid: d.appid, tabId: d.tabid}, (resp) => {\n        if(!chrome.runtime.lastError && resp) {\n          chrome.storage.sync.remove('tabid')\n        } else {\n          console.log(chrome.runtime.lastError)\n        }\n      })\n    })\n  }\n  else if (message.event===\"projectLoaded\"){\n    appid = message.options.projectName\n    chrome.storage.sync.set({\"appid\": appid}, function() {});\n  }\n  else if(message.event !== \"commandRecorded\"){\n    chrome.tabs.onUpdated.addListener(\n      tabListener(message, appid)\n    )\n  }\n  \n  sendResponse(true);\n\n});"],"names":[],"sourceRoot":""}